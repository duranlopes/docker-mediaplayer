import ssl, urllib2

CM_URL = 'http://{}/cm/{}'
CM_JSON_URL = '{}?mode=json'
MZ_URL = 'http://mediazone.vrt.be/api/v1/polopoly/assets/{}'
CM_ID = Regex('1\.\d+')

RE_FIND_VERSIONS = Regex('RESOLUTION=(\d+)x')
RE_FIX_RELATIVE = Regex('("|^)(?!https?:\/\/)([^"\n]+\.m3u8[^"\n]*)', Regex.MULTILINE)

RE_CLEANUP_M3U8 = '#.+?RESOLUTION=(?!{}).+?(\n)?.+?\.m3u8.*?\n'

HTTP_HEADERS = {"User-Agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_3) AppleWebKit/604.5.6 (KHTML, like Gecko) Version/11.0.3 Safari/604.5.6"}

####################################################################################################
def NormalizeURL(url):

	id = CM_ID.findall(url)

	if len(id) < 1:
		return url.split('?')[0]

	return 'http://{}/permalink/{}'.format(GetHost(url), id[0])

####################################################################################################
def MetadataObjectForURL(url):

	id = CM_ID.findall(url)

	if len(id) < 1:
		try:
			html = HTML.ElementFromURL(url, headers=HTTP_HEADERS)
		except Ex.HTTPError, e:
			raise Ex.MediaNotAvailable

		permalink = html.xpath('//a[@title="Permalink"]/@data-popup-text')

		if len(permalink) < 1:
			raise Ex.MediaNotAvailable
		else:
			id = CM_ID.findall(permalink[0])

	cm_url_html = CM_URL.format(GetHost(url), id[0])
	cm_url_json = CM_JSON_URL.format(cm_url_html)

	html = HTML.ElementFromString(HTTP.Request(cm_url_html, headers=HTTP_HEADERS).content.replace('&ndash;', '-'))

	# If we have a YouTube video, hand it over to the YouTube URL Service
	yt_src = html.xpath('//div[contains(@data-video-src, "youtube.com/")]/@data-video-src')
	if len(yt_src) > 0:
		return URLService.MetadataObjectForURL(yt_src[0])

	try:
		json = JSON.ObjectFromURL(cm_url_json, headers=HTTP_HEADERS)
	except:
		raise Ex.MediaNotAvailable

	if not 'title' in json:
		raise Ex.MediaNotAvailable

	title = json['title']
	thumb = json['imageData']['imageURL']

	if not thumb.startswith('http://'):
		thumb = 'http://{}/{}'.format(GetHost(url), thumb.lstrip('/'))

	try:
		summary = html.xpath('//div[@class="videoarticle-description"]/p/text()')[0]
		summary = String.StripTags(summary)
	except:
		summary = None

	return VideoClipObject(
		title = title,
		summary = summary,
		thumb = Resource.ContentsOfURLWithFallback(thumb)
	)

####################################################################################################
def MediaObjectsForURL(url):

	return [
		MediaObject(
			parts = [
				PartObject(
					key=HTTPLiveStreamURL(Callback(PlayVideo, url=url))
				)
			],
			video_resolution = 'sd',
			audio_channels = 2,
			optimized_for_streaming = True
		)
	]

####################################################################################################
def PlayVideo(url, **kwargs):

	id = CM_ID.findall(url)

	if len(id) < 1:
		try:
			permalink = HTML.ElementFromURL(url, headers=HTTP_HEADERS).xpath('//a[@title="Permalink"]/@data-popup-text')
		except:
			raise Ex.MediaExpired

		if len(permalink) < 1:
			raise Ex.MediaNotAvailable
		else:
			id = CM_ID.findall(permalink[0])

	cm_url_html = CM_URL.format(GetHost(url), id[0])
	cm_url_json = CM_JSON_URL.format(cm_url_html)

	try:
		json = JSON.ObjectFromURL(cm_url_json, headers=HTTP_HEADERS)
	except:
		raise Ex.MediaExpired

	mzid = json['mediazoneId']

	try:
		json = JSON.ObjectFromURL(MZ_URL.format(mzid), headers=HTTP_HEADERS)
	except:
		raise Ex.MediaNotAvailable

	for target in json['targetUrls']:

		if target['type'] != "HLS":
			continue

		playlist = GetData(target['url'])

		versions = RE_FIND_VERSIONS.findall(playlist)
		versions.sort(key=int, reverse=True)
		cleanup_regex = Regex(RE_CLEANUP_M3U8.format(versions[0]))
		playlist = cleanup_regex.sub('', playlist)

		base_url = target['url'].rsplit('/', 1)[0]
		playlist = RE_FIX_RELATIVE.sub('{}{}/{}'.format('\\1', base_url, '\\2'), playlist)

		return playlist

	raise Ex.MediaNotAvailable

####################################################################################################
def GetHost(url):

	return url.split('/')[2].replace('www.', '')

####################################################################################################
def GetData(url):

	req = urllib2.Request(url, headers=HTTP_HEADERS)
	ssl_context = ssl.SSLContext(ssl.PROTOCOL_TLSv1)
	data = urllib2.urlopen(req, context=ssl_context).read()

	return data
