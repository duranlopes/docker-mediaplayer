import ssl, urllib2

RE_VIDEO_ID = Regex("id: '(\d+)'")
RE_VIDEO_DATA = Regex("window\.videoBridge = (\{[^;]+\})")

PLAYER_URL = 'https://player.pbs.org/portalplayer/{}/'

####################################################################################################
def NormalizeURL(url):

    return url

####################################################################################################
def MetadataObjectForURL(url):

    html = HTML.ElementFromString(GetData(url))

    title = html.xpath('//meta[@property="og:title"]/@content')[0].split(' | ')[0]
    summary = html.xpath('//meta[@property="og:description"]/@content')[0]
    thumb = html.xpath('//meta[@property="og:image"]/@content')[0]

    try:
        airdate = html.xpath('//p[contains(., "Aired:")]/text()')[0].split('Aired:')[-1].strip()
        airdate = Datetime.ParseDate(airdate).date()
    except:
        airdate = None

    try:
        duration_parts = html.xpath('//span[@class="video-player__info__meta"]/text()')[0].split(' | ')[-1].strip().split(' ')
        duration = 0

        for value in duration_parts:
            if 'h' in value:
                duration += int(value.strip('h')) * 60 * 60 * 1000
            elif 'm' in value:
                duration += int(value.strip('m')) * 60 * 1000
            elif 's' in value:
                duration += int(value.strip('s')) * 1000
    except:
        duration = None

    return VideoClipObject(
        title = title,
        summary = summary,
        originally_available_at = airdate,
        duration = duration,
        thumb = Resource.ContentsOfURLWithFallback(url=thumb)
    )

####################################################################################################
def MediaObjectsForURL(url):

    return [
        MediaObject(
            video_codec = VideoCodec.H264,
            audio_codec = AudioCodec.AAC,
            container = Container.MP4,
            video_resolution = '720',
            audio_channels = 2,
            optimized_for_streaming = True,
            parts = [
                PartObject(key=Callback(PlayVideo, url=url))
            ]
        )
    ]

####################################################################################################
@indirect
def PlayVideo(url, **kwargs):

    page = GetData(url)
    video_id = RE_VIDEO_ID.search(page).group(1)

    page = GetData(PLAYER_URL.format(video_id))
    video_data = RE_VIDEO_DATA.search(page).group(1)
    json_obj = JSON.ObjectFromString(video_data)

    video_url_mp4 = None
    video_url_m3u8 = None

    for encoding_url in json_obj['encodings']:

        json_encoding_obj = JSON.ObjectFromString(GetData('{}?format=json'.format(encoding_url)))
        video_url = json_encoding_obj['url']

        if '.mp4' in video_url:
            video_url_mp4 = video_url
        elif '.m3u8' in video_url:
            video_url_m3u8 = video_url

    if video_url_mp4:
        return IndirectResponse(VideoClipObject, key=video_url_mp4)
    elif video_url_m3u8:
        video_url = video_url_m3u8.replace('-16x9-720p.m3u8', '-mp4-720p-3000k.mp4')
        return IndirectResponse(VideoClipObject, key=video_url)
    else:
        raise Ex.MediaNotAvailable

####################################################################################################
def GetData(url, add_headers={}):

    headers = {"User-Agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_6) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/11.1.2 Safari/605.1.15"}
    headers.update(add_headers)

    # Quick and dirty workaround
    # Do not validate ssl certificate
    # http://stackoverflow.com/questions/27835619/ssl-certificate-verify-failed-error
    req = urllib2.Request(url, headers=headers)
    ssl_context = ssl.SSLContext(ssl.PROTOCOL_TLSv1)
    data = urllib2.urlopen(req, context=ssl_context).read()

    return data
